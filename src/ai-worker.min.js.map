{"version":3,"sources":["node_modules/web-build-tasks/node_modules/browserify/node_modules/browser-pack/_prelude.js","app/src/ai-worker.coffee","ai-worker.min.js","node_modules/aye-aye/lib/game.js","node_modules/aye-aye/lib/games/bin-tic-tac-toe.js","node_modules/aye-aye/lib/games/ultimate-tic-tac-toe.js","node_modules/aye-aye/lib/minimax.js","node_modules/aye-aye/lib/monte-carlo.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","MinimaxAgent","MonteCarloAgent","UltimateTicTacToe","computerPlayer","game","player","random","shuffle","Math","floor","j","k","ref","ref1","prototype","possibleActions","js","len","len1","res","this","actions","openPositions","push","self","onmessage","action","agentName","depth","lastAction","data","command","args","play","postMessage","agent","timeFrameMs","isTerminal","nextAction","aye-aye","aye-aye/lib/games/ultimate-tic-tac-toe","aye-aye/lib/monte-carlo","2","P1","P2","3","BinTicTacToe","MAX","MIN","O","X","_","allPlays","at","bin","changedOn","columns","decode","diagonals","discountedUtility","empty","evaluate","evaluateCache","isFull","isWin","lines","masks","opponent","positions","rows","utility","winOn","γ","slice","W","0","v","concat","m","ms","w","results","v1","v2","pow","ref2","ref3","score","x","value1","nextPlayer","depth1","value","create","arguments","func","ctor","child","result","apply","Object","winner","nextAgent","positionForAction","constructor","toString","results1","join","../minimax","4","columnsU","diagonalsU","isWinU","linesU","rowsU","ultimateEmpty","every","a1","lastPlayedPosition","who","boardsForNextPlay","ij","arg","bri","ri","strRows","vs","p","./bin-tic-tac-toe","5","Limit","Number","MAX_SAFE_INTEGER","rootAgent","state","bestAction","minimax","α","β","ply","maxi","mini","nextValue","ref4","ref5","successor","max","min","./game","6","Tree","argmax","choose","xs","testF","curr","val","MIN_SAFE_INTEGER","observe","node","base","observed","addResult","stats","visitCount","options","tree","begin","lastNode","mul","successors","Date","now","select","expand","simulate","_this","nextState","T","nodeVisits","uct","C","nodeLog","log","succNode","sqrt"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCEA,GAAAK,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CAACP,GAAgBX,EAAQ,WAAxBW,aACAC,EAAmBZ,EAAQ,2BAA3BY,gBACAC,EAAqBb,EAAQ,0CAA7Ba,kBAEDG,EAAS,KACTD,EAAO,KAGPE,EAAS,SAAChB,EAAGP,GCIX,MDJiByB,MAAKC,MAAMD,KAAKF,UAAUvB,EAAEO,GAAGA,IAGlDiB,EAAU,SAACnB,GACT,GAAAE,GAAAoB,EAAAC,EAAA5B,EAAA6B,EAAAC,CACA,IADA9B,EAAIK,EAAES,OACW,IAALd,EAAZ,MAAOK,EACP,KAASE,EAAAqB,EAAA,EAAAC,EAAA7B,EAAA,EAAA,GAAA6B,EAAAD,EAAAC,EAAAD,EAAAC,EAAAtB,EAAA,GAAAsB,IAAAD,IAAAA,EACPD,EAAIJ,EAAOhB,EAAGP,GACd8B,GAAezB,EAAEsB,GAAGtB,EAAEE,IAArBF,EAAEE,GAAAuB,EAAA,GAAGzB,EAAEsB,GAAAG,EAAA,ECSV,ODRAzB,IAEFc,EAAiBY,UAAEC,gBAAkB,WACnC,GAAAzB,GAAAoB,EAAAM,EAAAL,EAAAjB,EAAAuB,EAAAC,EAAAN,EAAAC,EAAAM,CAAA,IAAmB,MAAAC,KAAAC,QAAnB,MAAOD,MAACC,OAER,KADAF,KACAP,EAAAQ,KAAAE,gBAAAX,EAAA,EAAAM,EAAAL,EAAAf,OAAAc,EAAAM,EAAAN,IACE,ICaAE,EAAOD,EAAID,GDdRrB,EAAAuB,EAAA,GAAGG,EAAAH,EAAA,GACNnB,EAAA,EAAAwB,EAAAF,EAAAnB,OAAAH,EAAAwB,EAAAxB,ICeEgB,EAAIM,EAAGtB,GDdPyB,EAAII,MAAMjC,EAAGoB,GCkBjB,ODjBAU,MAACC,QAAUd,EAAQY,IAErBK,KAAKC,UAAY,SAAC5C,GAChB,GAAA6C,GAAAC,EAAAC,EAAAC,EAAAjB,EAAAC,CAAA,QAAOhC,EAAEiD,KAAKC,SAAd,IACO,QCuBH,MDtBA3B,GAAO,GAAIF,GACXyB,EAAA,OAAAf,EAAA/B,EAAAiD,KAAAE,KAAAL,WAAAf,EAAoC,UACpCgB,EAAA,OAAAf,EAAAhC,EAAAiD,KAAAE,KAAAJ,OAAAf,EAA4B,EAC5BR,EAASF,EAAewB,EAAWC,EALvC,KAMO,OC0BH,MDzBAC,GAAahD,EAAEiD,KAAKE,KAAKH,WACM,MAAAA,IAA/BzB,EAAOA,EAAK6B,KAAKJ,IACjBH,EAASrB,EAAO4B,KAAK7B,GACrBA,EAAOA,EAAK6B,KAAKP,GACjBF,KAAKU,aAAaR,OAAAA,MAExBvB,EAAiB,SAACwB,EAAuBC,GACvC,GAAAO,ECmCA,OATiB,OAAbR,ID3BYA,EAAY,WC8Bf,MAATC,ID9BmCA,EAAQ,GAC/CO,EAAwB,YAAbR,EAAgC,GAAA3B,GAAa4B,GAAe,GAAA3B,IAAgBmC,YAAaR,KACpGK,KAAM,SAAC7B,GACL,IAAUA,EAAKiC,aCsCb,MDrCFF,GAAMG,WAAWlC,QC2ClBmC,UAAU,EAAEC,yCAAyC,EAAEC,0BAA0B,IAAIC,GAAG,SAASrD,EAAQU,EAAOJ,GC1FnH,GAAAgD,GAAAC,EAAAhC,CAEAA,IAAA,EAAA,GAAA+B,EAAA/B,EAAA,GAAAgC,EAAAhC,EAAA,GAEAb,EAAAJ,SACAgD,GAAAA,EACAC,GAAAA,QD8FMC,GAAG,SAASxD,EAAQU,EAAOJ,GEpGjC,GAAAmD,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1B,EAAA2B,EAAAC,EAAAC,EAAA5C,EAAA6C,EAAAC,EAAAxD,EAAAC,EAAAwD,EAAAC,EAAAC,EAAAC,EACAC,KAAAA,KAEA7D,GAAAvB,EAAA,cAAA0D,EAAAnC,EAAAmC,IAAAC,EAAApC,EAAAoC,IAEAnC,GAAA,EAAA,EAAA,GAAAsC,EAAAtC,EAAA,GAAAqC,EAAArC,EAAA,GAAAoC,EAAApC,EAAA,GAEAsD,EAAA,SAAAO,GACA,MAAA,IAAAA,GAGAjB,EAAA,SAAAiB,GACA,OACAC,EAAA,IACA7E,EAAA,IACA4C,EAAA,KACAgC,IAAA,WACA,KAAA,IAAAlF,OAAAkF,OAIAd,EAAA,EAEAN,EAAA,SAAAlE,GACA,GAAAP,GAAAS,EAAAoB,EAAAO,EAAAE,CAEA,KADAA,EAAA,EACA7B,EAAAoB,EAAA,EAAAO,EAAA7B,EAAAS,OAAAa,EAAAO,EAAA3B,IAAAoB,EACA7B,EAAAO,EAAAE,GACA6B,GAAAtC,GAAA,EAAAS,CAEA,OAAA6B,IAGAkC,EAAA,SAAAuB,EAAAtF,GACA,MAAAsF,IAAA,EAAAtF,EAAA,GAGA+E,EAAA,SAAAO,GACA,QAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,MAGApB,EAAA,SAAAoB,GACA,QAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,MAGAlB,EAAA,SAAAkB,GACA,QAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,KAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,GAAAvB,EAAAuB,EAAA,MAGAX,EAAA,SAAAW,GACA,MAAAH,GAAA7E,KAAAyE,EAAAO,IAAAC,OAAAJ,EAAA7E,KAAA4D,EAAAoB,IAAAH,EAAA7E,KAAA8D,EAAAkB,MAGAb,EAAA,SAAAa,GACA,GAAAtF,GAAAoB,CACA,KAAApB,EAAAoB,EAAA,EAAAA,EAAA,GAAApB,EAAAoB,GAAA,EACA,GAAA,KAAA,GAAApB,EAAAsF,GACA,OAAA,CAGA,QAAA,GAGAV,GACApE,GAAA,GAAA,KAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MACA4C,GAAA,GAAA,KAAA,OAAA,KAAA,MAAA,OAAA,OAAA,OAGA0B,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAEAJ,EAAA,SAAAY,EAAAF,GACA,GAAAhE,GAAAO,EAAA6D,EAAAC,CAIA,KAHAA,EAAAb,EAAAQ,IAAA,WACA,KAAA,IAAAlF,OAAAkF,MAEAhE,EAAA,EAAAO,EAAA8D,EAAAlF,OAAAa,EAAAO,EAAAP,IAEA,GADAoE,EAAAC,EAAArE,IACAoE,EAAAF,KAAAE,EACA,OAAA,CAGA,QAAA,GAGAP,EAAA,SAAAK,GACA,GAAAI,EAYA,OAXAA,GAAA,SAAAN,GACA,GAAApF,GAAAoB,EAAAO,EAAA6D,EAAAC,CAEA,KADAA,EAAAb,EAAAQ,GACApF,EAAAoB,EAAA,EAAAO,EAAA8D,EAAAlF,OAAAa,EAAAO,EAAA3B,IAAAoB,EAEA,GADAoE,EAAAC,EAAAzF,IACAwF,EAAAF,KAAAE,EACA,MAAAV,GAAA9E,EAGA,OAAA,OAEA0F,EAAA9B,IAAA8B,EAAA/B,QAGAZ,EAAA,SAAAuC,GACA,MAAAb,GAAAa,IAAAZ,EAAAY,EAAA1B,IAAAc,EAAAY,EAAA3B,IAGA3B,EAAA,SAAAsD,GACA,GAAAtF,GAAAoB,EAAAuE,CAEA,KADAA,KACA3F,EAAAoB,EAAA,EAAAA,EAAA,EAAApB,IAAAoB,EACA,KAAA,GAAA,EAAApB,EAAAsF,IACAK,EAAA1D,KAAAjC,EAGA,OAAA2F,IAGA7B,EAAA,SAAAwB,EAAAF,GACA,GAAApF,GAAAoB,EAAAS,CAEA,KADAA,KACA7B,EAAAoB,EAAA,EAAAA,EAAA,GAAApB,EAAAoB,GAAA,EACA,KAAA,GAAApB,EAAAsF,IACAzD,EAAAI,KAAAmD,GAAApF,EAAAsF,EAGA,OAAAzD,IAGAoC,EAAA,SAAA2B,EAAAC,GACA,GAAA7F,GAAAoB,CACA,KAAApB,EAAAoB,EAAA,EAAAA,EAAA,GAAApB,IAAAoB,EACA,IAAA,GAAA,EAAApB,EAAA4F,MAAA,GAAA,EAAA5F,EAAA6F,GACA,MAAA7F,EAGA,OAAA,OAGAkF,EAAA,GAEAb,EAAA,SAAAiB,EAAAhD,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEApB,KAAA4E,IAAAZ,EAAA5C,GAAA0C,EAAAM,IAGAN,EAAA,SAAAM,GACA,MAAAZ,GAAAY,EAAA1B,GACA,IACAc,EAAAY,EAAA3B,QAEAc,EAAAa,GACA,EAEAf,EAAAe,IAIAd,KAEAD,EAAA,SAAAe,GACA,GAAAlE,GAAAC,EAAAjB,EAAAuB,EAAAC,EAAAhC,EAAAmG,EAAAC,EAAAC,EAAAP,EAAAQ,CACA,IAAA,MAAA1B,EAAAc,GACA,MAAAd,GAAAc,EAIA,KAFAW,EAAA,EACAF,EAAApB,EAAAW,GACAlE,EAAA,EAAAO,EAAAoE,EAAAxF,OAAAa,EAAAO,EAAAP,IAAA,CAGA,IAFAhB,EAAA2F,EAAA3E,GACA4E,GAAA,EAAA,GAAAE,EAAAF,EAAA,GAAApG,EAAAoG,EAAA,GACA3E,EAAA,EAAAO,EAAAxB,EAAAG,OAAAc,EAAAO,EAAAP,IACAqE,EAAAtF,EAAAiB,GACAqE,IAAA9B,KACAsC,EAEAR,IAAA/B,KACA/D,CAGA,KAAAsG,GAAA,IAAAtG,IACAqG,GAAA/E,KAAA4E,IAAA,GAAAI,GAAAhF,KAAA4E,IAAA,GAAAlG,IAGA,MAAA4E,GAAAc,GAAAW,GAGAzC,EAAA,WAcA,QAAAA,GAAA2C,EAAAC,EAAAC,GACAvE,KAAAwE,MAAA,MAAAH,EAAAA,EAAA7B,EACAxC,KAAAsE,WAAA,MAAAA,EAAAA,EAAAxC,EACA9B,KAAAQ,MAAA,MAAA+D,EAAAA,EAAA,EA+GA,MA/HA7C,GAAA+C,OAAA,WACA,GAAAzG,GAAA4C,CAKA,OAJA5C,GAAA0G,UAAA,GAAA9D,EAAA,GAAA8D,UAAAjG,OAAA4E,EAAA7E,KAAAkG,UAAA,MACA,MAAA1G,IACAA,GAAA+D,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAEA,SAAA4C,EAAA/D,EAAAgE,GACAA,EAAAlF,UAAAiF,EAAAjF,SACA,IAAAmF,GAAA,GAAAD,GAAAE,EAAAH,EAAAI,MAAAF,EAAAjE,EACA,OAAAoE,QAAAF,KAAAA,EAAAA,EAAAD,GACAnD,GAAAQ,EAAAlE,IAAAyF,OAAAJ,EAAA7E,KAAAoC,IAAA,eASAc,EAAAhC,UAAAuC,GAAA,SAAA/D,GACA,MAAA+D,GAAAjC,KAAAwE,MAAAtG,IAGAwD,EAAAhC,UAAAuD,KAAA,WACA,MAAAA,GAAAjD,KAAAwE,QAGA9C,EAAAhC,UAAA0C,QAAA,WACA,MAAAA,GAAApC,KAAAwE,QAGA9C,EAAAhC,UAAA4C,UAAA,WACA,MAAAA,GAAAtC,KAAAwE,QAGA9C,EAAAhC,UAAAmD,MAAA,WACA,MAAAA,GAAA7C,KAAAwE,QAGA9C,EAAAhC,UAAAiD,OAAA,WACA,MAAAA,GAAA3C,KAAAwE,QAGA9C,EAAAhC,UAAAkD,MAAA,SAAAU,GACA,MAAAV,GAAA5C,KAAAwE,MAAAlB,IAGA5B,EAAAhC,UAAAuF,OAAA,WACA,QAAA,GACA,KAAAjF,KAAA4C,MAAAd,GACA,MAAAA,EACA,MAAA9B,KAAA4C,MAAAf,GACA,MAAAA,EACA,SACA,MAAA,QAIAH,EAAAhC,UAAAyD,MAAA,WACA,MAAAA,GAAAnD,KAAAwE,QAGA9C,EAAAhC,UAAAuB,WAAA,WACA,MAAAA,GAAAjB,KAAAwE,QAGA9C,EAAAhC,UAAAwF,UAAA,WACA,MAAAlF,MAAAsE,aAAAxC,EACAH,EAEAC,GAIAF,EAAAhC,UAAAQ,cAAA,WACA,MAAAA,GAAAF,KAAAwE,QAGA9C,EAAAhC,UAAAC,gBAAA,WACA,MAAAqC,GAAAhC,KAAAwE,MAAAxE,KAAAsE,aAGA5C,EAAAhC,UAAAY,OAAA,SAAApC,GACA,MAAA8B,MAAAsE,YAAA,EAAApG,EAAA8B,KAAAwE,OAGA9C,EAAAhC,UAAAyF,kBAAA,SAAA7E,GACA,MAAA6B,GAAAnC,KAAAwE,MAAAlE,IAGAoB,EAAAhC,UAAAmB,KAAA,SAAA2D,GACA,MAAA,IAAAxE,MAAAoF,YAAAZ,EAAAxE,KAAA+C,WAAA/C,KAAAQ,MAAA,IAGAkB,EAAAhC,UAAAwD,QAAA,WACA,MAAAA,GAAAlD,KAAAwE,QAGA9C,EAAAhC,UAAAqD,SAAA,SAAAO,GAIA,MAHA,OAAAA,IACAA,EAAAtD,KAAAsE,YAEAvB,EAAAO,IAGA5B,EAAAhC,UAAA2F,SAAA,WACA,GAAA5H,GAAAG,CACA,OAAA,YACA,GAAA0B,GAAAO,EAAAoE,EAAAJ,CAGA,KAFAI,EAAAjE,KAAAiD,OACAY,KACAvE,EAAA,EAAAO,EAAAoE,EAAAxF,OAAAa,EAAAO,EAAAP,IACA1B,EAAAqG,EAAA3E,GACAuE,EAAA1D,KAAA,IAAA,WACA,GAAAZ,GAAAO,EAAAwF,CAEA,KADAA,KACA/F,EAAA,EAAAO,EAAAlC,EAAAa,OAAAc,EAAAO,EAAAP,IACA9B,EAAAG,EAAA2B,GACA+F,EAAAnF,KAAAkC,EAAA5E,GAEA,OAAA6H,MACAC,KAAA,KAAA,IAEA,OAAA1B,IACArF,KAAAwB,MAAAuF,KAAA,OAGA7D,KAIA/C,EAAAJ,SACAwD,EAAAA,EACAD,EAAAA,EACAD,EAAAA,EACAkB,SAAAA,EACAV,OAAAA,EACAG,MAAAA,EACAN,IAAAA,EACAD,GAAAA,EACAgB,KAAAA,EACAb,QAAAA,EACAE,UAAAA,EACAO,MAAAA,EACAF,OAAAA,EACAC,MAAAA,EACA3B,WAAAA,EACAf,cAAAA,EACA8B,SAAAA,EACAG,UAAAA,EACAgB,MAAAA,EACAZ,kBAAAA,EACAW,QAAAA,EACAT,SAAAA,EACAf,aAAAA,KFwGG8D,aAAa,IAAIC,GAAG,SAASxH,EAAQU,EAAOJ,GG5b/C,GAAAmD,GAAAC,EAAAC,EAAAC,EAAA/C,EAAAgD,EAAAC,EAAAE,EAAAC,EAAAE,EAAAsD,EAAArD,EAAAC,EAAAqD,EAAAlI,EAAA+E,EAAAC,EAAAxB,EAAA2B,EAAAgD,EAAA/C,EAAAgD,EAAArG,EAAAC,EAAAwD,EAAA6C,EAAAC,EAAA5C,EACAE,KAAAA,KAEA7D,GAAAvB,EAAA,cAAA0D,EAAAnC,EAAAmC,IAAAC,EAAApC,EAAAoC,IAEAnC,EAAAxB,EAAA,qBAAA8D,EAAAtC,EAAAsC,EAAAD,EAAArC,EAAAqC,EAAAD,EAAApC,EAAAoC,EAAAQ,EAAA5C,EAAA4C,OAAAG,EAAA/C,EAAA+C,MAAAN,EAAAzC,EAAAyC,IAAAD,EAAAxC,EAAAwC,GAAAgB,EAAAxD,EAAAwD,KAAAb,EAAA3C,EAAA2C,QAAAE,EAAA7C,EAAA6C,UAAAO,EAAApD,EAAAoD,MAAAD,EAAAnD,EAAAmD,MAAAO,EAAA1D,EAAA0D,MAAAlC,EAAAxB,EAAAwB,WAAAwB,EAAAhD,EAAAgD,SAAAf,EAAAjC,EAAAiC,aAEAjE,EAAA+E,EAEAuD,GAAAtI,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAEAqI,EAAA,SAAA9H,GACA,GAAAE,GAAAwF,EAAAO,EAAAJ,CAEA,KADAA,KACA3F,EAAAwF,EAAA,EAAAO,EAAA,EAAAP,EAAAO,EAAA/F,EAAAwF,GAAA,EACAG,EAAA1D,KAAAnC,EAAAqF,MAAAnF,EAAAA,EAAA,GAEA,OAAA2F,IAGA6B,EAAA,SAAA1H,GACA,GAAAE,GAAAwF,EAAAG,CAEA,KADAA,KACA3F,EAAAwF,EAAA,EAAAA,EAAA,EAAAxF,IAAAwF,EACAG,EAAA1D,MAAAnC,EAAAE,GAAAF,EAAAE,EAAA,GAAAF,EAAAE,EAAA,IAEA,OAAA2F,IAGA8B,EAAA,SAAA3H,GACA,QAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAGA6H,EAAA,SAAA7H,GACA,MAAAqF,GAAA7E,KAAAsH,EAAA9H,IAAAyF,OAAAJ,EAAA7E,KAAAkH,EAAA1H,IAAAqF,EAAA7E,KAAAmH,EAAA3H,MAGA4H,EAAA,SAAA5H,EAAAsF,GACA,GAAAhF,GAAAuB,EAAA6D,EAAAO,CAEA,KADAA,EAAA4B,EAAA7H,GACA0F,EAAA,EAAA7D,EAAAoE,EAAAxF,OAAAiF,EAAA7D,EAAA6D,IAEA,GADApF,EAAA2F,EAAAP,GACApF,EAAA0H,MAAA,SAAAxC,GACA,MAAAZ,GAAAY,EAAAF,KAEA,OAAA,CAGA,QAAA,GAGAxE,EAAA,WACA,QAAAA,GAAAmH,EAAA3B,EAAA4B,EAAA1F,GACAR,KAAAhC,EAAA,MAAAiI,EAAAA,EAAAF,EACA/F,KAAAsE,WAAA,MAAAA,EAAAA,EAAAxC,EACA9B,KAAAkG,mBAAA,MAAAA,EAAAA,EAAA,EACAlG,KAAAQ,MAAA,MAAAA,EAAAA,EAAA,EAkMA,MA/LA1B,GAAAY,UAAAuC,GAAA,SAAA/D,EAAAoB,GACA,MAAA2C,GAAAjC,KAAAhC,EAAAE,GAAAoB,IAGAR,EAAAY,UAAAuD,KAAA,WACA,MAAA6C,GAAA9F,KAAAhC,IAGAc,EAAAY,UAAA0C,QAAA,WACA,MAAAsD,GAAA1F,KAAAhC,IAGAc,EAAAY,UAAA4C,UAAA,WACA,MAAAqD,GAAA3F,KAAAhC,IAGAc,EAAAY,UAAAmD,MAAA,WACA,MAAAgD,GAAA7F,KAAAhC,IAGAc,EAAAY,UAAAuB,WAAA,WACA,MAAA,KAAAjB,KAAAL,kBAAAlB,QAAAuB,KAAA4C,MAAAd,IAAA9B,KAAA4C,MAAAf,IAGA/C,EAAAY,UAAAuF,OAAA,WACA,QAAA,GACA,KAAAjF,KAAA4C,MAAAd,GACA,MAAAA,EACA,MAAA9B,KAAA4C,MAAAf,GACA,MAAAA,EACA,SACA,MAAA,QAIA/C,EAAAY,UAAAkD,MAAA,SAAAU,GACA,MAAAsC,GAAA5F,KAAAhC,EAAAsF,IAGAxE,EAAAY,UAAAyD,MAAA,SAAAjF,GACA,MAAAiF,GAAAnD,KAAAhC,EAAAE,KAGAY,EAAAY,UAAAwF,UAAA,WACA,MAAAlF,MAAAsE,aAAAxC,EACAH,EAEAC,GAIA9C,EAAAY,UAAAqD,SAAA,SAAAoD,GAIA,MAHA,OAAAA,IACAA,EAAAnG,KAAAsE,YAEA6B,IAAArE,EACAD,EAEAC,GAIAhD,EAAAY,UAAA0G,kBAAA,WACA,GAAAlI,GAAA2B,EAAA6D,EAAAO,EAAAlE,EAAAyD,CAEA,IADAA,EAAA,MAAAxD,KAAAkG,mBAAAlG,KAAAhC,EAAAgC,KAAAkG,oBAAA,KACA,MAAA1C,GAAAvC,EAAAuC,GAEA,CAGA,IAFAzD,KACAkE,EAAAjE,KAAAhC,EACAE,EAAAwF,EAAA,EAAA7D,EAAAoE,EAAAxF,OAAAiF,EAAA7D,EAAA3B,IAAAwF,EACAF,EAAAS,EAAA/F,GACA+C,EAAAuC,IACAzD,EAAAI,KAAAjC,EAGA,OAAA6B,GAVA,OAAAC,KAAAkG,qBAcApH,EAAAY,UAAAQ,cAAA,WACA,GAAAhC,GAAAoB,EAAAM,EAAAC,EAAA6D,EAAA/F,EAAAsG,EAAAlE,EAAAyD,CAGA,KAFAzD,KACAkE,EAAAjE,KAAAoG,oBACA1C,EAAA,EAAA7D,EAAAoE,EAAAxF,OAAAiF,EAAA7D,EAAA6D,IAAA,CAIA,IAHAxF,EAAA+F,EAAAP,GACAF,EAAAxD,KAAAhC,EAAAE,GACA0B,KACAN,EAAA3B,EAAA,EAAAA,EAAA,GAAA2B,EAAA3B,GAAA,EACA,KAAA,GAAA2B,EAAAkE,IACA5D,EAAAO,KAAAb,EAAA,EAGAS,GAAAI,MAAAjC,EAAA0B,IAEA,MAAAG,IAGAjB,EAAAY,UAAAY,OAAA,SAAA+F,GACA,MAAAA,IAGAvH,EAAAY,UAAAC,gBAAA,WACA,GAAAzB,GAAAoB,EAAAM,EAAAC,EAAAC,EAAA4D,EAAA/F,EAAAsG,EAAAC,EAAAnE,CACA,IAAA,MAAAC,KAAAC,QACA,MAAAD,MAAAC,OAIA,KAFAF,KACAkE,EAAAjE,KAAAE,gBACAwD,EAAA,EAAA7D,EAAAoE,EAAAxF,OAAAiF,EAAA7D,EAAA6D,IAEA,IADAQ,EAAAD,EAAAP,GAAAxF,EAAAgG,EAAA,GAAAtE,EAAAsE,EAAA,GACAvG,EAAA,EAAAmC,EAAAF,EAAAnB,OAAAd,EAAAmC,EAAAnC,IACA2B,EAAAM,EAAAjC,GACAoC,EAAAI,MAAAjC,EAAAoB,GAGA,OAAAU,MAAAC,QAAAF,GAGAjB,EAAAY,UAAAmB,KAAA,SAAAyF,GACA,GAAAtI,GAAAE,EAAAoB,CAIA,OAHApB,GAAAoI,EAAA,GAAAhH,EAAAgH,EAAA,GACAtI,EAAAgC,KAAAhC,EAAAqF,QACArF,EAAAE,GAAA8B,KAAAsE,YAAA,EAAAhF,EAAAtB,EAAAE,GACA,GAAA8B,MAAAoF,YAAApH,EAAAgC,KAAA+C,WAAAzD,EAAAU,KAAAQ,MAAA,IAGA1B,EAAAY,UAAAyF,kBAAA,SAAA7E,GACA,MAAAA,IAGAxB,EAAAY,UAAAwD,QAAA,WACA,GAAAhF,GAAAoB,EAAAC,EAAAjB,EAAAuB,EAAAC,EAAA4D,EAAA/F,EAAAsG,EAAAC,EAAAC,EAAAX,CAGA,KAFAW,EAAA,EACAF,EAAA4B,EAAA7F,KAAAhC,GACA0F,EAAA,EAAA7D,EAAAoE,EAAAxF,OAAAiF,EAAA7D,EAAA6D,IAAA,CAGA,IAFApF,EAAA2F,EAAAP,GACAQ,GAAA,EAAA,EAAA,GAAAhG,EAAAgG,EAAA,GAAA5E,EAAA4E,EAAA,GAAA3E,EAAA2E,EAAA,GACAvG,EAAA,EAAAmC,EAAAxB,EAAAG,OAAAd,EAAAmC,EAAAnC,IACA6F,EAAAlF,EAAAX,GACAiF,EAAAY,EAAA1B,KACA5D,EACA0E,EAAAY,EAAA3B,MACAvC,EAEAC,GAAAkD,EAAAe,EAEA,KAAAtF,GAAA,IAAAoB,IACA6E,GAAA/E,KAAA4E,IAAA,IAAA9F,GAAAkB,KAAA4E,IAAA,IAAA1E,IAEA6E,GAAA5E,EAEA,MAAA4E,IAGArF,EAAAY,UAAA2F,SAAA,WACA,GAAAkB,GAAA7C,EAAA/F,EAAA6I,EAAA3I,EAAA4I,EAAAjD,EAAAkD,CAEA,KADA7I,EAAA,GACA0I,EAAA7C,EAAA,EAAAA,GAAA,EAAA6C,IAAA7C,EAAA,CAEA,IADAgD,EAAA1G,KAAAiD,OAAAsD,GACAC,EAAA7I,EAAA,EAAAA,GAAA,EAAA6I,IAAA7I,EACA8I,EAAA,WACA,GAAA5G,GAAA/B,EAAA+F,CAEA,KADAA,KACA/F,EAAA,EAAA+B,EAAA6G,EAAAjI,OAAAX,EAAA+B,EAAA/B,IACA0F,EAAAkD,EAAA5I,GACA+F,EAAA1D,KAAA,IAAA,WACA,GAAAL,GAAA6G,EAAA1C,EAAAqB,CAGA,KAFArB,EAAAhB,EAAAO,GAAAgD,GACAlB,KACAqB,EAAA,EAAA7G,EAAAmE,EAAAxF,OAAAkI,EAAA7G,EAAA6G,IACAlJ,EAAAwG,EAAA0C,GACArB,EAAAnF,KAAAkC,EAAA5E,GAEA,OAAA6H,MACAC,KAAA,KAAA,IAEA,OAAA1B,MAEAhG,GAAA4I,EAAAlB,KAAA,QACAgB,EAAA,GAAAC,EAAA,KACA3I,GAAA,KAGA0I,GAAA,IACA1I,GAAA,iCAGA,MAAAA,IAGAiB,KAIAH,EAAAJ,SACAwD,EAAAA,EACAD,EAAAA,EACAD,EAAAA,EACAK,IAAAA,EACApD,kBAAAA,KHgcG0G,aAAa,EAAEoB,oBAAoB,IAAIC,GAAG,SAAS5I,EAAQU,EAAOJ,GInsBrE,GAAAuI,GAAAnF,EAAAC,EAAAhD,EAAA2C,EAAAC,EAAAhC,EAAAC,CAEAD,GAAAvB,EAAA,UAAAsD,EAAA/B,EAAA+B,GAAAC,EAAAhC,EAAAgC,GAEA/B,GAAA8B,EAAAC,GAAAG,EAAAlC,EAAA,GAAAmC,EAAAnC,EAAA,GAEAqH,EAAAC,OAAAC,iBAEApI,EAAA,WACA,QAAAA,GAAA4B,GACAR,KAAAQ,MAAA,MAAAA,EAAAA,EAAAsG,EACA9G,KAAAiH,UAAAtF,EAwEA,MArEA/C,GAAAc,UAAAwB,WAAA,SAAAgG,GACA,GAAAnF,GAAAoF,EAAAlD,CAGA,OAFAjE,MAAAiH,UAAAC,EAAAhC,YACAjB,EAAAjE,KAAAoH,QAAAF,GAAAnF,EAAAkC,EAAA,GAAAkD,EAAAlD,EAAA,GACAkD,GAGAvI,EAAAc,UAAA0H,QAAA,SAAAF,EAAAG,EAAAC,EAAAC,GACA,GAAAtG,EAcA,OAbA,OAAAoG,IACAA,GAAAP,GAEA,MAAAQ,IACAA,GAAAR,GAEA,MAAAS,IACAA,EAAA,GAEAtG,EAAAiG,EAAAjG,aACAA,GAAAiG,EAAAhC,cAAAlF,KAAAiH,aACAM,EAEAA,EAAAvH,KAAAQ,OAAAS,GACAiG,EAAAhE,UAAA,MACAgE,EAAAhC,cAAAvD,EACA3B,KAAAwH,KAAAN,EAAAG,EAAAC,EAAAC,GAEAvH,KAAAyH,KAAAP,EAAAG,EAAAC,EAAAC,IAIA3I,EAAAc,UAAA8H,KAAA,SAAAN,EAAAG,EAAAC,EAAAC,GACA,GAAAxF,GAAA/D,EAAAsC,EAAApC,EAAA2B,EAAA6H,EAAAzD,EAAAC,EAAAyD,EAAAC,EAAAC,EAAArE,CAGA,KAFAS,IAAA6C,EAAA,MAAAtD,EAAAS,EAAA,GAAAjG,EAAAiG,EAAA,GACAC,EAAAgD,EAAAvH,kBACAzB,EAAA,EAAA2B,EAAAqE,EAAAzF,OAAAP,EAAA2B,EAAA3B,IAAA,CAOA,GANAoC,EAAA4D,EAAAhG,GACA2J,EAAAX,EAAArG,KAAAP,GACAqH,EAAA3H,KAAAoH,QAAAS,EAAAR,EAAAC,EAAAC,GAAAG,EAAAC,EAAA,GAAA5F,EAAA4F,EAAA,GACAD,EAAAlE,IACAoE,GAAAF,EAAApH,GAAAkD,EAAAoE,EAAA,GAAA5J,EAAA4J,EAAA,IAEApE,GAAA8D,EACA,OAAA9D,EAAAxF,EAEAqJ,GAAAjI,KAAA0I,IAAAT,EAAA7D,GAEA,OAAAA,EAAAxF,IAGAY,EAAAc,UAAA+H,KAAA,SAAAP,EAAAG,EAAAC,EAAAC,GACA,GAAAxF,GAAA/D,EAAAsC,EAAApC,EAAA2B,EAAA6H,EAAAzD,EAAAC,EAAAyD,EAAAC,EAAAC,EAAArE,CAGA,KAFAS,IAAA6C,EAAA,MAAAtD,EAAAS,EAAA,GAAAjG,EAAAiG,EAAA,GACAC,EAAAgD,EAAAvH,kBACAzB,EAAA,EAAA2B,EAAAqE,EAAAzF,OAAAP,EAAA2B,EAAA3B,IAAA,CAOA,GANAoC,EAAA4D,EAAAhG,GACA2J,EAAAX,EAAArG,KAAAP,GACAqH,EAAA3H,KAAAoH,QAAAS,EAAAR,EAAAC,EAAAC,GAAAG,EAAAC,EAAA,GAAA5F,EAAA4F,EAAA,GACAD,EAAAlE,IACAoE,GAAAF,EAAApH,GAAAkD,EAAAoE,EAAA,GAAA5J,EAAA4J,EAAA,IAEApE,GAAA6D,EACA,OAAA7D,EAAAxF,EAEAsJ,GAAAlI,KAAA2I,IAAAT,EAAA9D,GAEA,OAAAA,EAAAxF,IAGAY,KAIAD,EAAAJ,SACAoD,IAAAA,EACAC,IAAAA,EACAkF,MAAAA,EACAlI,aAAAA,KJusBGoJ,SAAS,IAAIC,GAAG,SAAShK,EAAQU,EAAOJ,GKlyB3C,GAAAM,GAAA0C,EAAAC,EAAA0G,EAAAC,EAAAC,EAAA5I,CAEAA,GAAAvB,EAAA,UAAAsD,EAAA/B,EAAA+B,GAAAC,EAAAhC,EAAAgC,GAEA4G,EAAA,SAAApK,GACA,MAAAA,GAAAoB,KAAAC,MAAAD,KAAAF,SAAAlB,EAAAS,UAGA0J,EAAA,SAAAE,EAAAC,GACA,GAAAC,GAAArK,EAAA2B,EAAAiI,EAAAU,EAAApE,CAEA,KADA0D,EAAAf,OAAA0B,iBACAvK,EAAA,EAAA2B,EAAAwI,EAAA5J,OAAAP,EAAA2B,EAAA3B,IACAkG,EAAAiE,EAAAnK,GACAqK,EAAAD,EAAAlE,GACAmE,EAAAT,IACAA,EAAAS,EACAC,EAAApE,EAGA,OAAAoE,IAGAN,EAAA,WACA,QAAAA,GAAAxH,GACAV,KAAAU,KAAA,MAAAA,EAAAA,KA6BA,MA1BAwH,GAAAxI,UAAAgJ,QAAA,SAAAC,GACA,GAAAC,EACA,OAAA,QAAAA,EAAA5I,KAAAU,MAAAiI,GAAAC,EAAAD,GAAAC,EAAAD,IAAA,EAAA,IAGAT,EAAAxI,UAAAmJ,SAAA,SAAAF,GACA,MAAA,OAAA3I,KAAAU,KAAAiI,IAGAT,EAAAxI,UAAAoJ,UAAA,SAAAH,EAAA7D,GACA,GAAAiE,EAGA,OAFAA,GAAA/I,KAAAU,KAAAiI,GACAI,EAAA,IAAA,EACAA,EAAA,IAAAjE,GAGAoD,EAAAxI,UAAA8E,MAAA,SAAAmE,GACA,GAAAI,EAEA,OADAA,GAAA/I,KAAAU,KAAAiI,GACAI,EAAA,GAAAA,EAAA,IAGAb,EAAAxI,UAAAsJ,WAAA,SAAAL,GACA,MAAA3I,MAAAU,KAAAiI,GAAA,IAGAT,KAIArJ,EAAA,WACA,QAAAA,GAAAoK,GACA,GAAAxJ,GAAAwE,CACA,OAAAgF,IACAA,MAEAjJ,KAAAgB,YAAA,OAAAvB,EAAAwJ,EAAAjI,aAAAvB,EAAA,IACAO,KAAAkJ,KAAA,OAAAjF,EAAAgF,EAAAC,MAAAjF,EAAA,GAAAiE,GAwHA,MArHArJ,GAAAa,UAAAwB,WAAA,SAAAgG,GACA,GAAAnF,GAAAzB,EAAA6I,EAAAhC,EAAAnI,EAAAd,EAAAkL,EAAAvJ,EAAAwJ,EAAAV,EAAAlJ,EAAAqF,EAAAwE,CAGA,KAFAtJ,KAAAkJ,KAAAR,QAAAxB,GACAiC,EAAAI,KAAAC,MACAD,KAAAC,MAAAL,EAAAnJ,KAAAgB,aAAA,CAGA,IAFAhC,KACA2J,EAAAzB,EACA,MAAAyB,GAAA3I,KAAAkJ,KAAAL,SAAAF,IACA3J,EAAAmB,KAAAiJ,EAAAT,GACAA,EAAA3I,KAAAyJ,OAAAd,EAOA,KALAA,EAAAS,EACAT,EAAA1H,eACA0H,EAAA3I,KAAA0J,OAAAf,EAAA3J,IAEA8F,EAAA9E,KAAA2J,SAAAhB,GACAzK,EAAA,EAAA2B,EAAAb,EAAAP,OAAAP,EAAA2B,EAAA3B,IACAyK,EAAA3J,EAAAd,GACA8B,KAAAkJ,KAAAJ,UAAAH,EAAA7D,GAyBA,MAtBAuE,GAAAnC,EAAA5C,aAAA/C,EAAA,KACA+H,EAAA,WACA,GAAAhK,GAAAQ,EAAAL,EAAAoE,CAGA,KAFApE,EAAAyH,EAAAvH,kBACAkE,KACAvE,EAAA,EAAAQ,EAAAL,EAAAhB,OAAAa,EAAAQ,EAAAR,IACAgB,EAAAb,EAAAH,GACAuE,EAAA1D,MAAAG,EAAA4G,EAAArG,KAAAP,IAEA,OAAAuD,MAEApE,EAAA0I,EAAAmB,EAAA,SAAAM,GACA,MAAA,UAAAtD,GACA,GAAAhG,GAAAuJ,CAEA,OADAvJ,GAAAgG,EAAA,GAAAuD,EAAAvD,EAAA,GACAsD,EAAAV,KAAAL,SAAAgB,GACAR,EAAAO,EAAAV,KAAA1E,MAAAqF,GAEA9C,OAAA0B,mBAGAzI,OAAAmH,EAAA1H,EAAA,GAAAsC,EAAAtC,EAAA,GACA0H,GAGAtI,EAAAa,UAAA+J,OAAA,SAAAd,GACA,GAAAmB,GAAAC,CACA,OAAApB,GAAA1H,aACA,MAEA6I,EAAA,GACAC,EAAA/J,KAAAkJ,KAAAF,WAAAL,GACAoB,GAAAD,EACA9J,KAAAgK,IAAArB,EAAAoB,GAEA/J,KAAAa,KAAA8H,KAIA9J,EAAAa,UAAAsK,IAAA,SAAArB,EAAAoB,GACA,GAAAE,GAAA3J,EAAA4J,EAAAZ,CAaA,OAZAW,GAAA,GACAX,EAAA,WACA,GAAApL,GAAA2B,EAAAJ,EAAAoE,CAGA,KAFApE,EAAAkJ,EAAAhJ,kBACAkE,KACA3F,EAAA,EAAA2B,EAAAJ,EAAAhB,OAAAP,EAAA2B,EAAA3B,IACAoC,EAAAb,EAAAvB,GACA2F,EAAA1D,KAAAwI,EAAA9H,KAAAP,GAEA,OAAAuD,MAEAqG,EAAA9K,KAAA+K,IAAAJ,GACA5B,EAAAmB,EAAA,SAAAM,GACA,MAAA,UAAAQ,GAEA,MADAR,GAAAV,KAAAR,QAAA0B,GACAR,EAAAV,KAAA1E,MAAA4F,GAAAH,EAAA7K,KAAAiL,KAAAH,GAAAN,EAAAV,KAAAF,WAAAoB,IAAA,SAEApK,QAGAnB,EAAAa,UAAAgK,OAAA,SAAAf,EAAA3J,GACA,GAAAsB,GAAAL,EAAA/B,EAAA2B,EAAAgI,CAEA,KADA5H,EAAA0I,EAAAhJ,kBACAzB,EAAA,EAAA2B,EAAAI,EAAAxB,OAAAP,EAAA2B,EAAA3B,IAGA,GAFAoC,EAAAL,EAAA/B,GACA2J,EAAAc,EAAA9H,KAAAP,IACAN,KAAAkJ,KAAAL,SAAAhB,GAGA,MAFA7H,MAAAkJ,KAAAR,QAAAb,GACA7I,EAAAmB,KAAA0H,GACAA,CAGA,OAAA7H,MAAAa,KAAA8H,IAGA9J,EAAAa,UAAAiK,SAAA,SAAAhB,GAEA,IADA,GAAA1D,IACA0D,EAAA1H,cACA0H,EAAA3I,KAAAa,KAAA8H,EAGA,QADA1D,EAAA0D,EAAA1D,UAEA,IAAA1D,GACA,MAAA,EACA,KAAAC,GACA,QACA,SACA,MAAA,KAIA3C,EAAAa,UAAAmB,KAAA,SAAA8H,GACA,MAAAA,GAAA9H,KAAAuH,EAAAO,EAAAhJ,qBAGAd,KAIAF,EAAAJ,SACAgD,GAAAA,EACAC,GAAAA,EACA3C,gBAAAA,EACAqJ,KAAAA,KLsyBGF,SAAS,SAAS","file":"ai-worker.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# coffeelint: disable=max_line_length\n\n{MinimaxAgent} = require 'aye-aye'\n{MonteCarloAgent} = require 'aye-aye/lib/monte-carlo'\n{UltimateTicTacToe} = require 'aye-aye/lib/games/ultimate-tic-tac-toe'\n\nplayer = null\ngame = null\n\n# returns random j such that i ≤ j < n\nrandom = (i, n) -> Math.floor(Math.random()*(n-i)+i)\n\n# Fisher–Yates\nshuffle = (a) ->\n  n = a.length\n  return a if n is 0\n  for i in [0...n-1]\n    j = random i, n\n    [a[i],a[j]] = [a[j],a[i]]\n  a\n\nUltimateTicTacToe::possibleActions = ->\n  return @actions if @actions?\n  res = []\n  for [i, js] in @openPositions()\n    for j in js\n      res.push [i, j]\n  @actions = shuffle res\n\nself.onmessage = (e) ->\n  switch e.data.command\n    when 'setup'\n      game = new UltimateTicTacToe\n      agentName = e.data.args.agentName ? 'minimax'\n      depth = e.data.args.depth ? 3\n      player = computerPlayer agentName, depth\n    when 'play'\n      lastAction = e.data.args.lastAction\n      game = game.play lastAction if lastAction?\n      action = player.play game\n      game = game.play action\n      self.postMessage {action}\n\ncomputerPlayer = (agentName = 'minimax', depth = 3) ->\n  agent = if agentName is 'minimax' then new MinimaxAgent depth else new MonteCarloAgent timeFrameMs: depth\n  play: (game) ->\n    return if game.isTerminal()\n    agent.nextAction game\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar MinimaxAgent, MonteCarloAgent, UltimateTicTacToe, computerPlayer, game, player, random, shuffle;\n\nMinimaxAgent = require('aye-aye').MinimaxAgent;\n\nMonteCarloAgent = require('aye-aye/lib/monte-carlo').MonteCarloAgent;\n\nUltimateTicTacToe = require('aye-aye/lib/games/ultimate-tic-tac-toe').UltimateTicTacToe;\n\nplayer = null;\n\ngame = null;\n\nrandom = function(i, n) {\n  return Math.floor(Math.random() * (n - i) + i);\n};\n\nshuffle = function(a) {\n  var i, j, k, n, ref, ref1;\n  n = a.length;\n  if (n === 0) {\n    return a;\n  }\n  for (i = k = 0, ref = n - 1; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n    j = random(i, n);\n    ref1 = [a[j], a[i]], a[i] = ref1[0], a[j] = ref1[1];\n  }\n  return a;\n};\n\nUltimateTicTacToe.prototype.possibleActions = function() {\n  var i, j, js, k, l, len, len1, ref, ref1, res;\n  if (this.actions != null) {\n    return this.actions;\n  }\n  res = [];\n  ref = this.openPositions();\n  for (k = 0, len = ref.length; k < len; k++) {\n    ref1 = ref[k], i = ref1[0], js = ref1[1];\n    for (l = 0, len1 = js.length; l < len1; l++) {\n      j = js[l];\n      res.push([i, j]);\n    }\n  }\n  return this.actions = shuffle(res);\n};\n\nself.onmessage = function(e) {\n  var action, agentName, depth, lastAction, ref, ref1;\n  switch (e.data.command) {\n    case 'setup':\n      game = new UltimateTicTacToe;\n      agentName = (ref = e.data.args.agentName) != null ? ref : 'minimax';\n      depth = (ref1 = e.data.args.depth) != null ? ref1 : 3;\n      return player = computerPlayer(agentName, depth);\n    case 'play':\n      lastAction = e.data.args.lastAction;\n      if (lastAction != null) {\n        game = game.play(lastAction);\n      }\n      action = player.play(game);\n      game = game.play(action);\n      return self.postMessage({\n        action: action\n      });\n  }\n};\n\ncomputerPlayer = function(agentName, depth) {\n  var agent;\n  if (agentName == null) {\n    agentName = 'minimax';\n  }\n  if (depth == null) {\n    depth = 3;\n  }\n  agent = agentName === 'minimax' ? new MinimaxAgent(depth) : new MonteCarloAgent({\n    timeFrameMs: depth\n  });\n  return {\n    play: function(game) {\n      if (game.isTerminal()) {\n        return;\n      }\n      return agent.nextAction(game);\n    }\n  };\n};\n\n\n},{\"aye-aye\":5,\"aye-aye/lib/games/ultimate-tic-tac-toe\":4,\"aye-aye/lib/monte-carlo\":6}],2:[function(require,module,exports){\nvar P1, P2, ref;\n\nref = [1, 2], P1 = ref[0], P2 = ref[1];\n\nmodule.exports = {\n  P1: P1,\n  P2: P2\n};\n\n},{}],3:[function(require,module,exports){\nvar BinTicTacToe, MAX, MIN, O, X, _, allPlays, at, bin, changedOn, columns, decode, diagonals, discountedUtility, empty, evaluate, evaluateCache, isFull, isTerminal, isWin, lines, masks, openPositions, opponent, positions, ref, ref1, rows, utility, winOn, γ,\n  slice = [].slice;\n\nref = require('../minimax'), MAX = ref.MAX, MIN = ref.MIN;\n\nref1 = [0x0, 0x1, 0x2], _ = ref1[0], X = ref1[1], O = ref1[2];\n\nopponent = function(W) {\n  return ~W & 0x3;\n};\n\ndecode = function(W) {\n  return {\n    0x0: ' ',\n    0x1: 'X',\n    0x2: 'O'\n  }[W] || (function() {\n    throw new Error(W);\n  })();\n};\n\nempty = 0x0;\n\nbin = function(a) {\n  var e, i, j, len, res;\n  res = 0;\n  for (i = j = 0, len = a.length; j < len; i = ++j) {\n    e = a[i];\n    res |= e << (i * 2);\n  }\n  return res;\n};\n\nat = function(v, i) {\n  return v >> (i * 2) & 0x3;\n};\n\nrows = function(v) {\n  return [[at(v, 0), at(v, 1), at(v, 2)], [at(v, 3), at(v, 4), at(v, 5)], [at(v, 6), at(v, 7), at(v, 8)]];\n};\n\ncolumns = function(v) {\n  return [[at(v, 0), at(v, 3), at(v, 6)], [at(v, 1), at(v, 4), at(v, 7)], [at(v, 2), at(v, 5), at(v, 8)]];\n};\n\ndiagonals = function(v) {\n  return [[at(v, 0), at(v, 4), at(v, 8)], [at(v, 2), at(v, 4), at(v, 6)]];\n};\n\nlines = function(v) {\n  return slice.call(rows(v)).concat(slice.call(columns(v)), slice.call(diagonals(v)));\n};\n\nisFull = function(v) {\n  var i, j;\n  for (i = j = 0; j < 18; i = j += 2) {\n    if ((0x3 << i & v) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmasks = {\n  0x1: [0x15, 0x540, 0x15000, 0x1041, 0x4104, 0x10410, 0x10101, 0x1110],\n  0x2: [0x2a, 0xa80, 0x2a000, 0x2082, 0x8208, 0x20820, 0x20202, 0x2220]\n};\n\npositions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\nisWin = function(v, W) {\n  var j, len, m, ms;\n  ms = masks[W] || (function() {\n    throw new Error(W);\n  })();\n  for (j = 0, len = ms.length; j < len; j++) {\n    m = ms[j];\n    if ((m & v) === m) {\n      return true;\n    }\n  }\n  return false;\n};\n\nwinOn = function(v) {\n  var w;\n  w = function(W) {\n    var i, j, len, m, ms;\n    ms = masks[W];\n    for (i = j = 0, len = ms.length; j < len; i = ++j) {\n      m = ms[i];\n      if ((m & v) === m) {\n        return positions[i];\n      }\n    }\n    return null;\n  };\n  return (w(X)) || (w(O)) || [];\n};\n\nisTerminal = function(v) {\n  return (isFull(v)) || (isWin(v, X)) || (isWin(v, O));\n};\n\nopenPositions = function(v) {\n  var i, j, results;\n  results = [];\n  for (i = j = 0; j < 9; i = ++j) {\n    if ((0x3 << (i * 2) & v) === 0) {\n      results.push(i);\n    }\n  }\n  return results;\n};\n\nallPlays = function(v, W) {\n  var i, j, res;\n  res = [];\n  for (i = j = 0; j < 18; i = j += 2) {\n    if ((0x3 << i & v) === 0) {\n      res.push(W << i | v);\n    }\n  }\n  return res;\n};\n\nchangedOn = function(v1, v2) {\n  var i, j;\n  for (i = j = 0; j < 18; i = ++j) {\n    if ((0x3 << (i * 2) & v1) !== (0x3 << (i * 2) & v2)) {\n      return i;\n    }\n  }\n  return null;\n};\n\nγ = 0.1;\n\ndiscountedUtility = function(v, depth) {\n  if (depth == null) {\n    depth = 0;\n  }\n  return Math.pow(γ, depth) * utility(v);\n};\n\nutility = function(v) {\n  if (isWin(v, X)) {\n    return 2000;\n  } else if (isWin(v, O)) {\n    return -2000;\n  } else if (isFull(v)) {\n    return 0;\n  } else {\n    return evaluate(v);\n  }\n};\n\nevaluateCache = {};\n\nevaluate = function(v) {\n  var j, k, l, len, len1, o, ref2, ref3, score, w, x;\n  if (evaluateCache[v] != null) {\n    return evaluateCache[v];\n  }\n  score = 0;\n  ref2 = lines(v);\n  for (j = 0, len = ref2.length; j < len; j++) {\n    l = ref2[j];\n    ref3 = [0, 0], x = ref3[0], o = ref3[1];\n    for (k = 0, len1 = l.length; k < len1; k++) {\n      w = l[k];\n      if (w === X) {\n        ++x;\n      }\n      if (w === O) {\n        ++o;\n      }\n    }\n    if (x === 0 || o === 0) {\n      score += Math.pow(10, x) - Math.pow(10, o);\n    }\n  }\n  return evaluateCache[v] = score;\n};\n\nBinTicTacToe = (function() {\n  BinTicTacToe.create = function() {\n    var a, args;\n    a = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (a == null) {\n      a = [_, _, _, _, _, _, _, _, _];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(BinTicTacToe, [bin(a)].concat(slice.call(args)), function(){});\n  };\n\n  function BinTicTacToe(value1, nextPlayer, depth1) {\n    this.value = value1 != null ? value1 : empty;\n    this.nextPlayer = nextPlayer != null ? nextPlayer : X;\n    this.depth = depth1 != null ? depth1 : 0;\n  }\n\n  BinTicTacToe.prototype.at = function(i) {\n    return at(this.value, i);\n  };\n\n  BinTicTacToe.prototype.rows = function() {\n    return rows(this.value);\n  };\n\n  BinTicTacToe.prototype.columns = function() {\n    return columns(this.value);\n  };\n\n  BinTicTacToe.prototype.diagonals = function() {\n    return diagonals(this.value);\n  };\n\n  BinTicTacToe.prototype.lines = function() {\n    return lines(this.value);\n  };\n\n  BinTicTacToe.prototype.isFull = function() {\n    return isFull(this.value);\n  };\n\n  BinTicTacToe.prototype.isWin = function(W) {\n    return isWin(this.value, W);\n  };\n\n  BinTicTacToe.prototype.winner = function() {\n    switch (false) {\n      case !this.isWin(X):\n        return X;\n      case !this.isWin(O):\n        return O;\n      default:\n        return null;\n    }\n  };\n\n  BinTicTacToe.prototype.winOn = function() {\n    return winOn(this.value);\n  };\n\n  BinTicTacToe.prototype.isTerminal = function() {\n    return isTerminal(this.value);\n  };\n\n  BinTicTacToe.prototype.nextAgent = function() {\n    if (this.nextPlayer === X) {\n      return MAX;\n    } else {\n      return MIN;\n    }\n  };\n\n  BinTicTacToe.prototype.openPositions = function() {\n    return openPositions(this.value);\n  };\n\n  BinTicTacToe.prototype.possibleActions = function() {\n    return allPlays(this.value, this.nextPlayer);\n  };\n\n  BinTicTacToe.prototype.action = function(i) {\n    return this.nextPlayer << (i * 2) | this.value;\n  };\n\n  BinTicTacToe.prototype.positionForAction = function(action) {\n    return changedOn(this.value, action);\n  };\n\n  BinTicTacToe.prototype.play = function(value) {\n    return new this.constructor(value, this.opponent(), this.depth + 1);\n  };\n\n  BinTicTacToe.prototype.utility = function() {\n    return utility(this.value);\n  };\n\n  BinTicTacToe.prototype.opponent = function(W) {\n    if (W == null) {\n      W = this.nextPlayer;\n    }\n    return opponent(W);\n  };\n\n  BinTicTacToe.prototype.toString = function() {\n    var e, r;\n    return ((function() {\n      var j, len, ref2, results;\n      ref2 = this.rows();\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        r = ref2[j];\n        results.push(\"|\" + (((function() {\n          var k, len1, results1;\n          results1 = [];\n          for (k = 0, len1 = r.length; k < len1; k++) {\n            e = r[k];\n            results1.push(decode(e));\n          }\n          return results1;\n        })()).join('|')) + \"|\");\n      }\n      return results;\n    }).call(this)).join(\"\\n\");\n  };\n\n  return BinTicTacToe;\n\n})();\n\nmodule.exports = {\n  _: _,\n  X: X,\n  O: O,\n  opponent: opponent,\n  decode: decode,\n  empty: empty,\n  bin: bin,\n  at: at,\n  rows: rows,\n  columns: columns,\n  diagonals: diagonals,\n  lines: lines,\n  isFull: isFull,\n  isWin: isWin,\n  isTerminal: isTerminal,\n  openPositions: openPositions,\n  allPlays: allPlays,\n  changedOn: changedOn,\n  winOn: winOn,\n  discountedUtility: discountedUtility,\n  utility: utility,\n  evaluate: evaluate,\n  BinTicTacToe: BinTicTacToe\n};\n\n},{\"../minimax\":5}],4:[function(require,module,exports){\nvar BinTicTacToe, MAX, MIN, O, UltimateTicTacToe, X, _, at, bin, columns, columnsU, decode, diagonals, diagonalsU, e, empty, evaluate, isTerminal, isWin, isWinU, lines, linesU, ref, ref1, rows, rowsU, ultimateEmpty, winOn,\n  slice = [].slice;\n\nref = require('../minimax'), MAX = ref.MAX, MIN = ref.MIN;\n\nref1 = require('./bin-tic-tac-toe'), _ = ref1._, X = ref1.X, O = ref1.O, decode = ref1.decode, empty = ref1.empty, bin = ref1.bin, at = ref1.at, rows = ref1.rows, columns = ref1.columns, diagonals = ref1.diagonals, lines = ref1.lines, isWin = ref1.isWin, winOn = ref1.winOn, isTerminal = ref1.isTerminal, evaluate = ref1.evaluate, BinTicTacToe = ref1.BinTicTacToe;\n\ne = empty;\n\nultimateEmpty = [e, e, e, e, e, e, e, e, e];\n\nrowsU = function(a) {\n  var i, m, ref2, results;\n  results = [];\n  for (i = m = 0, ref2 = 3 * 3; m < ref2; i = m += 3) {\n    results.push(a.slice(i, i + 3));\n  }\n  return results;\n};\n\ncolumnsU = function(a) {\n  var i, m, results;\n  results = [];\n  for (i = m = 0; m < 3; i = ++m) {\n    results.push([a[i], a[i + 3], a[i + 6]]);\n  }\n  return results;\n};\n\ndiagonalsU = function(a) {\n  return [[a[0], a[4], a[8]], [a[2], a[4], a[6]]];\n};\n\nlinesU = function(a) {\n  return slice.call(rowsU(a)).concat(slice.call(columnsU(a)), slice.call(diagonalsU(a)));\n};\n\nisWinU = function(a, W) {\n  var l, len, m, ref2;\n  ref2 = linesU(a);\n  for (m = 0, len = ref2.length; m < len; m++) {\n    l = ref2[m];\n    if (l.every(function(v) {\n      return isWin(v, W);\n    })) {\n      return true;\n    }\n  }\n  return false;\n};\n\nUltimateTicTacToe = (function() {\n  function UltimateTicTacToe(a1, nextPlayer, lastPlayedPosition, depth) {\n    this.a = a1 != null ? a1 : ultimateEmpty;\n    this.nextPlayer = nextPlayer != null ? nextPlayer : X;\n    this.lastPlayedPosition = lastPlayedPosition != null ? lastPlayedPosition : 4;\n    this.depth = depth != null ? depth : 0;\n  }\n\n  UltimateTicTacToe.prototype.at = function(i, j) {\n    return at(this.a[i], j);\n  };\n\n  UltimateTicTacToe.prototype.rows = function() {\n    return rowsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.columns = function() {\n    return columnsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.diagonals = function() {\n    return diagonalsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.lines = function() {\n    return linesU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.isTerminal = function() {\n    return (this.possibleActions().length === 0) || (this.isWin(X)) || (this.isWin(O));\n  };\n\n  UltimateTicTacToe.prototype.winner = function() {\n    switch (false) {\n      case !this.isWin(X):\n        return X;\n      case !this.isWin(O):\n        return O;\n      default:\n        return null;\n    }\n  };\n\n  UltimateTicTacToe.prototype.isWin = function(W) {\n    return isWinU(this.a, W);\n  };\n\n  UltimateTicTacToe.prototype.winOn = function(i) {\n    return winOn(this.a[i]);\n  };\n\n  UltimateTicTacToe.prototype.nextAgent = function() {\n    if (this.nextPlayer === X) {\n      return MAX;\n    } else {\n      return MIN;\n    }\n  };\n\n  UltimateTicTacToe.prototype.opponent = function(who) {\n    if (who == null) {\n      who = this.nextPlayer;\n    }\n    if (who === X) {\n      return O;\n    } else {\n      return X;\n    }\n  };\n\n  UltimateTicTacToe.prototype.boardsForNextPlay = function() {\n    var i, len, m, ref2, res, v;\n    v = this.lastPlayedPosition != null ? this.a[this.lastPlayedPosition] : null;\n    if ((v != null) && !(isTerminal(v))) {\n      return [this.lastPlayedPosition];\n    } else {\n      res = [];\n      ref2 = this.a;\n      for (i = m = 0, len = ref2.length; m < len; i = ++m) {\n        v = ref2[i];\n        if (!isTerminal(v)) {\n          res.push(i);\n        }\n      }\n      return res;\n    }\n  };\n\n  UltimateTicTacToe.prototype.openPositions = function() {\n    var i, j, js, len, m, n, ref2, res, v;\n    res = [];\n    ref2 = this.boardsForNextPlay();\n    for (m = 0, len = ref2.length; m < len; m++) {\n      i = ref2[m];\n      v = this.a[i];\n      js = [];\n      for (j = n = 0; n < 18; j = n += 2) {\n        if ((0x3 << j & v) === 0) {\n          js.push(j / 2);\n        }\n      }\n      res.push([i, js]);\n    }\n    return res;\n  };\n\n  UltimateTicTacToe.prototype.action = function(ij) {\n    return ij;\n  };\n\n  UltimateTicTacToe.prototype.possibleActions = function() {\n    var i, j, js, len, len1, m, n, ref2, ref3, res;\n    if (this.actions != null) {\n      return this.actions;\n    }\n    res = [];\n    ref2 = this.openPositions();\n    for (m = 0, len = ref2.length; m < len; m++) {\n      ref3 = ref2[m], i = ref3[0], js = ref3[1];\n      for (n = 0, len1 = js.length; n < len1; n++) {\n        j = js[n];\n        res.push([i, j]);\n      }\n    }\n    return this.actions = res;\n  };\n\n  UltimateTicTacToe.prototype.play = function(arg) {\n    var a, i, j;\n    i = arg[0], j = arg[1];\n    a = this.a.slice();\n    a[i] = this.nextPlayer << (j * 2) | a[i];\n    return new this.constructor(a, this.opponent(), j, this.depth + 1);\n  };\n\n  UltimateTicTacToe.prototype.positionForAction = function(action) {\n    return action;\n  };\n\n  UltimateTicTacToe.prototype.utility = function() {\n    var i, j, k, l, len, len1, m, n, ref2, ref3, score, v;\n    score = 0;\n    ref2 = linesU(this.a);\n    for (m = 0, len = ref2.length; m < len; m++) {\n      l = ref2[m];\n      ref3 = [0, 0, 0], i = ref3[0], j = ref3[1], k = ref3[2];\n      for (n = 0, len1 = l.length; n < len1; n++) {\n        v = l[n];\n        if (isWin(v, X)) {\n          ++i;\n        } else if (isWin(v, O)) {\n          ++j;\n        }\n        k += evaluate(v);\n      }\n      if (i === 0 || j === 0) {\n        score += Math.pow(1000, i) - Math.pow(1000, j);\n      }\n      score += k;\n    }\n    return score;\n  };\n\n  UltimateTicTacToe.prototype.toString = function() {\n    var bri, m, n, ri, s, strRows, v, vs;\n    s = '';\n    for (bri = m = 0; m <= 2; bri = ++m) {\n      vs = this.rows()[bri];\n      for (ri = n = 0; n <= 2; ri = ++n) {\n        strRows = (function() {\n          var len, o, results;\n          results = [];\n          for (o = 0, len = vs.length; o < len; o++) {\n            v = vs[o];\n            results.push(\"|\" + (((function() {\n              var len1, p, ref2, results1;\n              ref2 = (rows(v))[ri];\n              results1 = [];\n              for (p = 0, len1 = ref2.length; p < len1; p++) {\n                e = ref2[p];\n                results1.push(decode(e));\n              }\n              return results1;\n            })()).join('|')) + \"|\");\n          }\n          return results;\n        })();\n        s += strRows.join(' ║ ');\n        if (bri < 2 || ri < 2) {\n          s += '\\n';\n        }\n      }\n      if (bri < 2) {\n        s += '════════╬═════════╬════════\\n';\n      }\n    }\n    return s;\n  };\n\n  return UltimateTicTacToe;\n\n})();\n\nmodule.exports = {\n  _: _,\n  X: X,\n  O: O,\n  bin: bin,\n  UltimateTicTacToe: UltimateTicTacToe\n};\n\n},{\"../minimax\":5,\"./bin-tic-tac-toe\":3}],5:[function(require,module,exports){\nvar Limit, MAX, MIN, MinimaxAgent, P1, P2, ref, ref1;\n\nref = require('./game'), P1 = ref.P1, P2 = ref.P2;\n\nref1 = [P1, P2], MAX = ref1[0], MIN = ref1[1];\n\nLimit = Number.MAX_SAFE_INTEGER;\n\nMinimaxAgent = (function() {\n  function MinimaxAgent(depth) {\n    this.depth = depth != null ? depth : Limit;\n    this.rootAgent = MAX;\n  }\n\n  MinimaxAgent.prototype.nextAction = function(state) {\n    var _, bestAction, ref2;\n    this.rootAgent = state.nextAgent();\n    ref2 = this.minimax(state), _ = ref2[0], bestAction = ref2[1];\n    return bestAction;\n  };\n\n  MinimaxAgent.prototype.minimax = function(state, α, β, ply) {\n    var isTerminal;\n    if (α == null) {\n      α = -Limit;\n    }\n    if (β == null) {\n      β = +Limit;\n    }\n    if (ply == null) {\n      ply = 0;\n    }\n    isTerminal = state.isTerminal();\n    if (!isTerminal && state.nextAgent() === this.rootAgent) {\n      ++ply;\n    }\n    if (ply > this.depth || isTerminal) {\n      return [state.utility(), null];\n    } else if (state.nextAgent() === MAX) {\n      return this.maxi(state, α, β, ply);\n    } else {\n      return this.mini(state, α, β, ply);\n    }\n  };\n\n  MinimaxAgent.prototype.maxi = function(state, α, β, ply) {\n    var _, a, action, i, len, nextValue, ref2, ref3, ref4, ref5, successor, v;\n    ref2 = [-Limit, null], v = ref2[0], a = ref2[1];\n    ref3 = state.possibleActions();\n    for (i = 0, len = ref3.length; i < len; i++) {\n      action = ref3[i];\n      successor = state.play(action);\n      ref4 = this.minimax(successor, α, β, ply), nextValue = ref4[0], _ = ref4[1];\n      if (nextValue > v) {\n        ref5 = [nextValue, action], v = ref5[0], a = ref5[1];\n      }\n      if (v >= β) {\n        return [v, a];\n      }\n      α = Math.max(α, v);\n    }\n    return [v, a];\n  };\n\n  MinimaxAgent.prototype.mini = function(state, α, β, ply) {\n    var _, a, action, i, len, nextValue, ref2, ref3, ref4, ref5, successor, v;\n    ref2 = [+Limit, null], v = ref2[0], a = ref2[1];\n    ref3 = state.possibleActions();\n    for (i = 0, len = ref3.length; i < len; i++) {\n      action = ref3[i];\n      successor = state.play(action);\n      ref4 = this.minimax(successor, α, β, ply), nextValue = ref4[0], _ = ref4[1];\n      if (nextValue < v) {\n        ref5 = [nextValue, action], v = ref5[0], a = ref5[1];\n      }\n      if (v <= α) {\n        return [v, a];\n      }\n      β = Math.min(β, v);\n    }\n    return [v, a];\n  };\n\n  return MinimaxAgent;\n\n})();\n\nmodule.exports = {\n  MAX: MAX,\n  MIN: MIN,\n  Limit: Limit,\n  MinimaxAgent: MinimaxAgent\n};\n\n},{\"./game\":2}],6:[function(require,module,exports){\nvar MonteCarloAgent, P1, P2, Tree, argmax, choose, ref;\n\nref = require('./game'), P1 = ref.P1, P2 = ref.P2;\n\nchoose = function(a) {\n  return a[Math.floor(Math.random() * a.length)];\n};\n\nargmax = function(xs, testF) {\n  var curr, i, len, max, val, x;\n  max = Number.MIN_SAFE_INTEGER;\n  for (i = 0, len = xs.length; i < len; i++) {\n    x = xs[i];\n    curr = testF(x);\n    if (curr > max) {\n      max = curr;\n      val = x;\n    }\n  }\n  return val;\n};\n\nTree = (function() {\n  function Tree(data) {\n    this.data = data != null ? data : {};\n  }\n\n  Tree.prototype.observe = function(node) {\n    var base;\n    return (base = this.data)[node] != null ? base[node] : base[node] = [0, 0];\n  };\n\n  Tree.prototype.observed = function(node) {\n    return this.data[node] != null;\n  };\n\n  Tree.prototype.addResult = function(node, result) {\n    var stats;\n    stats = this.data[node];\n    stats[0] += 1;\n    return stats[1] += result;\n  };\n\n  Tree.prototype.value = function(node) {\n    var stats;\n    stats = this.data[node];\n    return stats[1] / stats[0];\n  };\n\n  Tree.prototype.visitCount = function(node) {\n    return this.data[node][0];\n  };\n\n  return Tree;\n\n})();\n\nMonteCarloAgent = (function() {\n  function MonteCarloAgent(options) {\n    var ref1, ref2;\n    if (options == null) {\n      options = {};\n    }\n    this.timeFrameMs = (ref1 = options.timeFrameMs) != null ? ref1 : 5000;\n    this.tree = (ref2 = options.tree) != null ? ref2 : new Tree;\n  }\n\n  MonteCarloAgent.prototype.nextAction = function(state) {\n    var _, action, begin, bestAction, game, i, lastNode, len, mul, node, ref1, result, successors;\n    this.tree.observe(state);\n    begin = Date.now();\n    while (Date.now() - begin < this.timeFrameMs) {\n      game = [];\n      node = state;\n      while ((node != null) && this.tree.observed(node)) {\n        game.push(lastNode = node);\n        node = this.select(node);\n      }\n      node = lastNode;\n      if (!node.isTerminal()) {\n        node = this.expand(node, game);\n      }\n      result = this.simulate(node);\n      for (i = 0, len = game.length; i < len; i++) {\n        node = game[i];\n        this.tree.addResult(node, result);\n      }\n    }\n    mul = state.nextPlayer === P1 ? +1 : -1;\n    successors = (function() {\n      var j, len1, ref1, results;\n      ref1 = state.possibleActions();\n      results = [];\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        action = ref1[j];\n        results.push([action, state.play(action)]);\n      }\n      return results;\n    })();\n    ref1 = argmax(successors, (function(_this) {\n      return function(arg) {\n        var action, nextState;\n        action = arg[0], nextState = arg[1];\n        if (_this.tree.observed(nextState)) {\n          return mul * _this.tree.value(nextState);\n        } else {\n          return Number.MIN_SAFE_INTEGER;\n        }\n      };\n    })(this)), bestAction = ref1[0], _ = ref1[1];\n    return bestAction;\n  };\n\n  MonteCarloAgent.prototype.select = function(node) {\n    var T, nodeVisits;\n    if (node.isTerminal()) {\n      return null;\n    }\n    T = 30;\n    nodeVisits = this.tree.visitCount(node);\n    if (nodeVisits >= T) {\n      return this.uct(node, nodeVisits);\n    } else {\n      return this.play(node);\n    }\n  };\n\n  MonteCarloAgent.prototype.uct = function(node, nodeVisits) {\n    var C, action, nodeLog, successors;\n    C = 0.7;\n    successors = (function() {\n      var i, len, ref1, results;\n      ref1 = node.possibleActions();\n      results = [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        action = ref1[i];\n        results.push(node.play(action));\n      }\n      return results;\n    })();\n    nodeLog = Math.log(nodeVisits);\n    return argmax(successors, (function(_this) {\n      return function(succNode) {\n        _this.tree.observe(succNode);\n        return _this.tree.value(succNode) + C * Math.sqrt(nodeLog / (_this.tree.visitCount(succNode) || 1e-6));\n      };\n    })(this));\n  };\n\n  MonteCarloAgent.prototype.expand = function(node, game) {\n    var action, actions, i, len, successor;\n    actions = node.possibleActions();\n    for (i = 0, len = actions.length; i < len; i++) {\n      action = actions[i];\n      successor = node.play(action);\n      if (!this.tree.observed(successor)) {\n        this.tree.observe(successor);\n        game.push(successor);\n        return successor;\n      }\n    }\n    return this.play(node);\n  };\n\n  MonteCarloAgent.prototype.simulate = function(node) {\n    var winner;\n    while (!node.isTerminal()) {\n      node = this.play(node);\n    }\n    winner = node.winner();\n    switch (winner) {\n      case P1:\n        return +1;\n      case P2:\n        return -1;\n      default:\n        return 0;\n    }\n  };\n\n  MonteCarloAgent.prototype.play = function(node) {\n    return node.play(choose(node.possibleActions()));\n  };\n\n  return MonteCarloAgent;\n\n})();\n\nmodule.exports = {\n  P1: P1,\n  P2: P2,\n  MonteCarloAgent: MonteCarloAgent,\n  Tree: Tree\n};\n\n},{\"./game\":2}]},{},[1])\n\n","var P1, P2, ref;\n\nref = [1, 2], P1 = ref[0], P2 = ref[1];\n\nmodule.exports = {\n  P1: P1,\n  P2: P2\n};\n","var BinTicTacToe, MAX, MIN, O, X, _, allPlays, at, bin, changedOn, columns, decode, diagonals, discountedUtility, empty, evaluate, evaluateCache, isFull, isTerminal, isWin, lines, masks, openPositions, opponent, positions, ref, ref1, rows, utility, winOn, γ,\n  slice = [].slice;\n\nref = require('../minimax'), MAX = ref.MAX, MIN = ref.MIN;\n\nref1 = [0x0, 0x1, 0x2], _ = ref1[0], X = ref1[1], O = ref1[2];\n\nopponent = function(W) {\n  return ~W & 0x3;\n};\n\ndecode = function(W) {\n  return {\n    0x0: ' ',\n    0x1: 'X',\n    0x2: 'O'\n  }[W] || (function() {\n    throw new Error(W);\n  })();\n};\n\nempty = 0x0;\n\nbin = function(a) {\n  var e, i, j, len, res;\n  res = 0;\n  for (i = j = 0, len = a.length; j < len; i = ++j) {\n    e = a[i];\n    res |= e << (i * 2);\n  }\n  return res;\n};\n\nat = function(v, i) {\n  return v >> (i * 2) & 0x3;\n};\n\nrows = function(v) {\n  return [[at(v, 0), at(v, 1), at(v, 2)], [at(v, 3), at(v, 4), at(v, 5)], [at(v, 6), at(v, 7), at(v, 8)]];\n};\n\ncolumns = function(v) {\n  return [[at(v, 0), at(v, 3), at(v, 6)], [at(v, 1), at(v, 4), at(v, 7)], [at(v, 2), at(v, 5), at(v, 8)]];\n};\n\ndiagonals = function(v) {\n  return [[at(v, 0), at(v, 4), at(v, 8)], [at(v, 2), at(v, 4), at(v, 6)]];\n};\n\nlines = function(v) {\n  return slice.call(rows(v)).concat(slice.call(columns(v)), slice.call(diagonals(v)));\n};\n\nisFull = function(v) {\n  var i, j;\n  for (i = j = 0; j < 18; i = j += 2) {\n    if ((0x3 << i & v) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmasks = {\n  0x1: [0x15, 0x540, 0x15000, 0x1041, 0x4104, 0x10410, 0x10101, 0x1110],\n  0x2: [0x2a, 0xa80, 0x2a000, 0x2082, 0x8208, 0x20820, 0x20202, 0x2220]\n};\n\npositions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\nisWin = function(v, W) {\n  var j, len, m, ms;\n  ms = masks[W] || (function() {\n    throw new Error(W);\n  })();\n  for (j = 0, len = ms.length; j < len; j++) {\n    m = ms[j];\n    if ((m & v) === m) {\n      return true;\n    }\n  }\n  return false;\n};\n\nwinOn = function(v) {\n  var w;\n  w = function(W) {\n    var i, j, len, m, ms;\n    ms = masks[W];\n    for (i = j = 0, len = ms.length; j < len; i = ++j) {\n      m = ms[i];\n      if ((m & v) === m) {\n        return positions[i];\n      }\n    }\n    return null;\n  };\n  return (w(X)) || (w(O)) || [];\n};\n\nisTerminal = function(v) {\n  return (isFull(v)) || (isWin(v, X)) || (isWin(v, O));\n};\n\nopenPositions = function(v) {\n  var i, j, results;\n  results = [];\n  for (i = j = 0; j < 9; i = ++j) {\n    if ((0x3 << (i * 2) & v) === 0) {\n      results.push(i);\n    }\n  }\n  return results;\n};\n\nallPlays = function(v, W) {\n  var i, j, res;\n  res = [];\n  for (i = j = 0; j < 18; i = j += 2) {\n    if ((0x3 << i & v) === 0) {\n      res.push(W << i | v);\n    }\n  }\n  return res;\n};\n\nchangedOn = function(v1, v2) {\n  var i, j;\n  for (i = j = 0; j < 18; i = ++j) {\n    if ((0x3 << (i * 2) & v1) !== (0x3 << (i * 2) & v2)) {\n      return i;\n    }\n  }\n  return null;\n};\n\nγ = 0.1;\n\ndiscountedUtility = function(v, depth) {\n  if (depth == null) {\n    depth = 0;\n  }\n  return Math.pow(γ, depth) * utility(v);\n};\n\nutility = function(v) {\n  if (isWin(v, X)) {\n    return 2000;\n  } else if (isWin(v, O)) {\n    return -2000;\n  } else if (isFull(v)) {\n    return 0;\n  } else {\n    return evaluate(v);\n  }\n};\n\nevaluateCache = {};\n\nevaluate = function(v) {\n  var j, k, l, len, len1, o, ref2, ref3, score, w, x;\n  if (evaluateCache[v] != null) {\n    return evaluateCache[v];\n  }\n  score = 0;\n  ref2 = lines(v);\n  for (j = 0, len = ref2.length; j < len; j++) {\n    l = ref2[j];\n    ref3 = [0, 0], x = ref3[0], o = ref3[1];\n    for (k = 0, len1 = l.length; k < len1; k++) {\n      w = l[k];\n      if (w === X) {\n        ++x;\n      }\n      if (w === O) {\n        ++o;\n      }\n    }\n    if (x === 0 || o === 0) {\n      score += Math.pow(10, x) - Math.pow(10, o);\n    }\n  }\n  return evaluateCache[v] = score;\n};\n\nBinTicTacToe = (function() {\n  BinTicTacToe.create = function() {\n    var a, args;\n    a = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (a == null) {\n      a = [_, _, _, _, _, _, _, _, _];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(BinTicTacToe, [bin(a)].concat(slice.call(args)), function(){});\n  };\n\n  function BinTicTacToe(value1, nextPlayer, depth1) {\n    this.value = value1 != null ? value1 : empty;\n    this.nextPlayer = nextPlayer != null ? nextPlayer : X;\n    this.depth = depth1 != null ? depth1 : 0;\n  }\n\n  BinTicTacToe.prototype.at = function(i) {\n    return at(this.value, i);\n  };\n\n  BinTicTacToe.prototype.rows = function() {\n    return rows(this.value);\n  };\n\n  BinTicTacToe.prototype.columns = function() {\n    return columns(this.value);\n  };\n\n  BinTicTacToe.prototype.diagonals = function() {\n    return diagonals(this.value);\n  };\n\n  BinTicTacToe.prototype.lines = function() {\n    return lines(this.value);\n  };\n\n  BinTicTacToe.prototype.isFull = function() {\n    return isFull(this.value);\n  };\n\n  BinTicTacToe.prototype.isWin = function(W) {\n    return isWin(this.value, W);\n  };\n\n  BinTicTacToe.prototype.winner = function() {\n    switch (false) {\n      case !this.isWin(X):\n        return X;\n      case !this.isWin(O):\n        return O;\n      default:\n        return null;\n    }\n  };\n\n  BinTicTacToe.prototype.winOn = function() {\n    return winOn(this.value);\n  };\n\n  BinTicTacToe.prototype.isTerminal = function() {\n    return isTerminal(this.value);\n  };\n\n  BinTicTacToe.prototype.nextAgent = function() {\n    if (this.nextPlayer === X) {\n      return MAX;\n    } else {\n      return MIN;\n    }\n  };\n\n  BinTicTacToe.prototype.openPositions = function() {\n    return openPositions(this.value);\n  };\n\n  BinTicTacToe.prototype.possibleActions = function() {\n    return allPlays(this.value, this.nextPlayer);\n  };\n\n  BinTicTacToe.prototype.action = function(i) {\n    return this.nextPlayer << (i * 2) | this.value;\n  };\n\n  BinTicTacToe.prototype.positionForAction = function(action) {\n    return changedOn(this.value, action);\n  };\n\n  BinTicTacToe.prototype.play = function(value) {\n    return new this.constructor(value, this.opponent(), this.depth + 1);\n  };\n\n  BinTicTacToe.prototype.utility = function() {\n    return utility(this.value);\n  };\n\n  BinTicTacToe.prototype.opponent = function(W) {\n    if (W == null) {\n      W = this.nextPlayer;\n    }\n    return opponent(W);\n  };\n\n  BinTicTacToe.prototype.toString = function() {\n    var e, r;\n    return ((function() {\n      var j, len, ref2, results;\n      ref2 = this.rows();\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        r = ref2[j];\n        results.push(\"|\" + (((function() {\n          var k, len1, results1;\n          results1 = [];\n          for (k = 0, len1 = r.length; k < len1; k++) {\n            e = r[k];\n            results1.push(decode(e));\n          }\n          return results1;\n        })()).join('|')) + \"|\");\n      }\n      return results;\n    }).call(this)).join(\"\\n\");\n  };\n\n  return BinTicTacToe;\n\n})();\n\nmodule.exports = {\n  _: _,\n  X: X,\n  O: O,\n  opponent: opponent,\n  decode: decode,\n  empty: empty,\n  bin: bin,\n  at: at,\n  rows: rows,\n  columns: columns,\n  diagonals: diagonals,\n  lines: lines,\n  isFull: isFull,\n  isWin: isWin,\n  isTerminal: isTerminal,\n  openPositions: openPositions,\n  allPlays: allPlays,\n  changedOn: changedOn,\n  winOn: winOn,\n  discountedUtility: discountedUtility,\n  utility: utility,\n  evaluate: evaluate,\n  BinTicTacToe: BinTicTacToe\n};\n","var BinTicTacToe, MAX, MIN, O, UltimateTicTacToe, X, _, at, bin, columns, columnsU, decode, diagonals, diagonalsU, e, empty, evaluate, isTerminal, isWin, isWinU, lines, linesU, ref, ref1, rows, rowsU, ultimateEmpty, winOn,\n  slice = [].slice;\n\nref = require('../minimax'), MAX = ref.MAX, MIN = ref.MIN;\n\nref1 = require('./bin-tic-tac-toe'), _ = ref1._, X = ref1.X, O = ref1.O, decode = ref1.decode, empty = ref1.empty, bin = ref1.bin, at = ref1.at, rows = ref1.rows, columns = ref1.columns, diagonals = ref1.diagonals, lines = ref1.lines, isWin = ref1.isWin, winOn = ref1.winOn, isTerminal = ref1.isTerminal, evaluate = ref1.evaluate, BinTicTacToe = ref1.BinTicTacToe;\n\ne = empty;\n\nultimateEmpty = [e, e, e, e, e, e, e, e, e];\n\nrowsU = function(a) {\n  var i, m, ref2, results;\n  results = [];\n  for (i = m = 0, ref2 = 3 * 3; m < ref2; i = m += 3) {\n    results.push(a.slice(i, i + 3));\n  }\n  return results;\n};\n\ncolumnsU = function(a) {\n  var i, m, results;\n  results = [];\n  for (i = m = 0; m < 3; i = ++m) {\n    results.push([a[i], a[i + 3], a[i + 6]]);\n  }\n  return results;\n};\n\ndiagonalsU = function(a) {\n  return [[a[0], a[4], a[8]], [a[2], a[4], a[6]]];\n};\n\nlinesU = function(a) {\n  return slice.call(rowsU(a)).concat(slice.call(columnsU(a)), slice.call(diagonalsU(a)));\n};\n\nisWinU = function(a, W) {\n  var l, len, m, ref2;\n  ref2 = linesU(a);\n  for (m = 0, len = ref2.length; m < len; m++) {\n    l = ref2[m];\n    if (l.every(function(v) {\n      return isWin(v, W);\n    })) {\n      return true;\n    }\n  }\n  return false;\n};\n\nUltimateTicTacToe = (function() {\n  function UltimateTicTacToe(a1, nextPlayer, lastPlayedPosition, depth) {\n    this.a = a1 != null ? a1 : ultimateEmpty;\n    this.nextPlayer = nextPlayer != null ? nextPlayer : X;\n    this.lastPlayedPosition = lastPlayedPosition != null ? lastPlayedPosition : 4;\n    this.depth = depth != null ? depth : 0;\n  }\n\n  UltimateTicTacToe.prototype.at = function(i, j) {\n    return at(this.a[i], j);\n  };\n\n  UltimateTicTacToe.prototype.rows = function() {\n    return rowsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.columns = function() {\n    return columnsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.diagonals = function() {\n    return diagonalsU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.lines = function() {\n    return linesU(this.a);\n  };\n\n  UltimateTicTacToe.prototype.isTerminal = function() {\n    return (this.possibleActions().length === 0) || (this.isWin(X)) || (this.isWin(O));\n  };\n\n  UltimateTicTacToe.prototype.winner = function() {\n    switch (false) {\n      case !this.isWin(X):\n        return X;\n      case !this.isWin(O):\n        return O;\n      default:\n        return null;\n    }\n  };\n\n  UltimateTicTacToe.prototype.isWin = function(W) {\n    return isWinU(this.a, W);\n  };\n\n  UltimateTicTacToe.prototype.winOn = function(i) {\n    return winOn(this.a[i]);\n  };\n\n  UltimateTicTacToe.prototype.nextAgent = function() {\n    if (this.nextPlayer === X) {\n      return MAX;\n    } else {\n      return MIN;\n    }\n  };\n\n  UltimateTicTacToe.prototype.opponent = function(who) {\n    if (who == null) {\n      who = this.nextPlayer;\n    }\n    if (who === X) {\n      return O;\n    } else {\n      return X;\n    }\n  };\n\n  UltimateTicTacToe.prototype.boardsForNextPlay = function() {\n    var i, len, m, ref2, res, v;\n    v = this.lastPlayedPosition != null ? this.a[this.lastPlayedPosition] : null;\n    if ((v != null) && !(isTerminal(v))) {\n      return [this.lastPlayedPosition];\n    } else {\n      res = [];\n      ref2 = this.a;\n      for (i = m = 0, len = ref2.length; m < len; i = ++m) {\n        v = ref2[i];\n        if (!isTerminal(v)) {\n          res.push(i);\n        }\n      }\n      return res;\n    }\n  };\n\n  UltimateTicTacToe.prototype.openPositions = function() {\n    var i, j, js, len, m, n, ref2, res, v;\n    res = [];\n    ref2 = this.boardsForNextPlay();\n    for (m = 0, len = ref2.length; m < len; m++) {\n      i = ref2[m];\n      v = this.a[i];\n      js = [];\n      for (j = n = 0; n < 18; j = n += 2) {\n        if ((0x3 << j & v) === 0) {\n          js.push(j / 2);\n        }\n      }\n      res.push([i, js]);\n    }\n    return res;\n  };\n\n  UltimateTicTacToe.prototype.action = function(ij) {\n    return ij;\n  };\n\n  UltimateTicTacToe.prototype.possibleActions = function() {\n    var i, j, js, len, len1, m, n, ref2, ref3, res;\n    if (this.actions != null) {\n      return this.actions;\n    }\n    res = [];\n    ref2 = this.openPositions();\n    for (m = 0, len = ref2.length; m < len; m++) {\n      ref3 = ref2[m], i = ref3[0], js = ref3[1];\n      for (n = 0, len1 = js.length; n < len1; n++) {\n        j = js[n];\n        res.push([i, j]);\n      }\n    }\n    return this.actions = res;\n  };\n\n  UltimateTicTacToe.prototype.play = function(arg) {\n    var a, i, j;\n    i = arg[0], j = arg[1];\n    a = this.a.slice();\n    a[i] = this.nextPlayer << (j * 2) | a[i];\n    return new this.constructor(a, this.opponent(), j, this.depth + 1);\n  };\n\n  UltimateTicTacToe.prototype.positionForAction = function(action) {\n    return action;\n  };\n\n  UltimateTicTacToe.prototype.utility = function() {\n    var i, j, k, l, len, len1, m, n, ref2, ref3, score, v;\n    score = 0;\n    ref2 = linesU(this.a);\n    for (m = 0, len = ref2.length; m < len; m++) {\n      l = ref2[m];\n      ref3 = [0, 0, 0], i = ref3[0], j = ref3[1], k = ref3[2];\n      for (n = 0, len1 = l.length; n < len1; n++) {\n        v = l[n];\n        if (isWin(v, X)) {\n          ++i;\n        } else if (isWin(v, O)) {\n          ++j;\n        }\n        k += evaluate(v);\n      }\n      if (i === 0 || j === 0) {\n        score += Math.pow(1000, i) - Math.pow(1000, j);\n      }\n      score += k;\n    }\n    return score;\n  };\n\n  UltimateTicTacToe.prototype.toString = function() {\n    var bri, m, n, ri, s, strRows, v, vs;\n    s = '';\n    for (bri = m = 0; m <= 2; bri = ++m) {\n      vs = this.rows()[bri];\n      for (ri = n = 0; n <= 2; ri = ++n) {\n        strRows = (function() {\n          var len, o, results;\n          results = [];\n          for (o = 0, len = vs.length; o < len; o++) {\n            v = vs[o];\n            results.push(\"|\" + (((function() {\n              var len1, p, ref2, results1;\n              ref2 = (rows(v))[ri];\n              results1 = [];\n              for (p = 0, len1 = ref2.length; p < len1; p++) {\n                e = ref2[p];\n                results1.push(decode(e));\n              }\n              return results1;\n            })()).join('|')) + \"|\");\n          }\n          return results;\n        })();\n        s += strRows.join(' ║ ');\n        if (bri < 2 || ri < 2) {\n          s += '\\n';\n        }\n      }\n      if (bri < 2) {\n        s += '════════╬═════════╬════════\\n';\n      }\n    }\n    return s;\n  };\n\n  return UltimateTicTacToe;\n\n})();\n\nmodule.exports = {\n  _: _,\n  X: X,\n  O: O,\n  bin: bin,\n  UltimateTicTacToe: UltimateTicTacToe\n};\n","var Limit, MAX, MIN, MinimaxAgent, P1, P2, ref, ref1;\n\nref = require('./game'), P1 = ref.P1, P2 = ref.P2;\n\nref1 = [P1, P2], MAX = ref1[0], MIN = ref1[1];\n\nLimit = Number.MAX_SAFE_INTEGER;\n\nMinimaxAgent = (function() {\n  function MinimaxAgent(depth) {\n    this.depth = depth != null ? depth : Limit;\n    this.rootAgent = MAX;\n  }\n\n  MinimaxAgent.prototype.nextAction = function(state) {\n    var _, bestAction, ref2;\n    this.rootAgent = state.nextAgent();\n    ref2 = this.minimax(state), _ = ref2[0], bestAction = ref2[1];\n    return bestAction;\n  };\n\n  MinimaxAgent.prototype.minimax = function(state, α, β, ply) {\n    var isTerminal;\n    if (α == null) {\n      α = -Limit;\n    }\n    if (β == null) {\n      β = +Limit;\n    }\n    if (ply == null) {\n      ply = 0;\n    }\n    isTerminal = state.isTerminal();\n    if (!isTerminal && state.nextAgent() === this.rootAgent) {\n      ++ply;\n    }\n    if (ply > this.depth || isTerminal) {\n      return [state.utility(), null];\n    } else if (state.nextAgent() === MAX) {\n      return this.maxi(state, α, β, ply);\n    } else {\n      return this.mini(state, α, β, ply);\n    }\n  };\n\n  MinimaxAgent.prototype.maxi = function(state, α, β, ply) {\n    var _, a, action, i, len, nextValue, ref2, ref3, ref4, ref5, successor, v;\n    ref2 = [-Limit, null], v = ref2[0], a = ref2[1];\n    ref3 = state.possibleActions();\n    for (i = 0, len = ref3.length; i < len; i++) {\n      action = ref3[i];\n      successor = state.play(action);\n      ref4 = this.minimax(successor, α, β, ply), nextValue = ref4[0], _ = ref4[1];\n      if (nextValue > v) {\n        ref5 = [nextValue, action], v = ref5[0], a = ref5[1];\n      }\n      if (v >= β) {\n        return [v, a];\n      }\n      α = Math.max(α, v);\n    }\n    return [v, a];\n  };\n\n  MinimaxAgent.prototype.mini = function(state, α, β, ply) {\n    var _, a, action, i, len, nextValue, ref2, ref3, ref4, ref5, successor, v;\n    ref2 = [+Limit, null], v = ref2[0], a = ref2[1];\n    ref3 = state.possibleActions();\n    for (i = 0, len = ref3.length; i < len; i++) {\n      action = ref3[i];\n      successor = state.play(action);\n      ref4 = this.minimax(successor, α, β, ply), nextValue = ref4[0], _ = ref4[1];\n      if (nextValue < v) {\n        ref5 = [nextValue, action], v = ref5[0], a = ref5[1];\n      }\n      if (v <= α) {\n        return [v, a];\n      }\n      β = Math.min(β, v);\n    }\n    return [v, a];\n  };\n\n  return MinimaxAgent;\n\n})();\n\nmodule.exports = {\n  MAX: MAX,\n  MIN: MIN,\n  Limit: Limit,\n  MinimaxAgent: MinimaxAgent\n};\n","var MonteCarloAgent, P1, P2, Tree, argmax, choose, ref;\n\nref = require('./game'), P1 = ref.P1, P2 = ref.P2;\n\nchoose = function(a) {\n  return a[Math.floor(Math.random() * a.length)];\n};\n\nargmax = function(xs, testF) {\n  var curr, i, len, max, val, x;\n  max = Number.MIN_SAFE_INTEGER;\n  for (i = 0, len = xs.length; i < len; i++) {\n    x = xs[i];\n    curr = testF(x);\n    if (curr > max) {\n      max = curr;\n      val = x;\n    }\n  }\n  return val;\n};\n\nTree = (function() {\n  function Tree(data) {\n    this.data = data != null ? data : {};\n  }\n\n  Tree.prototype.observe = function(node) {\n    var base;\n    return (base = this.data)[node] != null ? base[node] : base[node] = [0, 0];\n  };\n\n  Tree.prototype.observed = function(node) {\n    return this.data[node] != null;\n  };\n\n  Tree.prototype.addResult = function(node, result) {\n    var stats;\n    stats = this.data[node];\n    stats[0] += 1;\n    return stats[1] += result;\n  };\n\n  Tree.prototype.value = function(node) {\n    var stats;\n    stats = this.data[node];\n    return stats[1] / stats[0];\n  };\n\n  Tree.prototype.visitCount = function(node) {\n    return this.data[node][0];\n  };\n\n  return Tree;\n\n})();\n\nMonteCarloAgent = (function() {\n  function MonteCarloAgent(options) {\n    var ref1, ref2;\n    if (options == null) {\n      options = {};\n    }\n    this.timeFrameMs = (ref1 = options.timeFrameMs) != null ? ref1 : 5000;\n    this.tree = (ref2 = options.tree) != null ? ref2 : new Tree;\n  }\n\n  MonteCarloAgent.prototype.nextAction = function(state) {\n    var _, action, begin, bestAction, game, i, lastNode, len, mul, node, ref1, result, successors;\n    this.tree.observe(state);\n    begin = Date.now();\n    while (Date.now() - begin < this.timeFrameMs) {\n      game = [];\n      node = state;\n      while ((node != null) && this.tree.observed(node)) {\n        game.push(lastNode = node);\n        node = this.select(node);\n      }\n      node = lastNode;\n      if (!node.isTerminal()) {\n        node = this.expand(node, game);\n      }\n      result = this.simulate(node);\n      for (i = 0, len = game.length; i < len; i++) {\n        node = game[i];\n        this.tree.addResult(node, result);\n      }\n    }\n    mul = state.nextPlayer === P1 ? +1 : -1;\n    successors = (function() {\n      var j, len1, ref1, results;\n      ref1 = state.possibleActions();\n      results = [];\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        action = ref1[j];\n        results.push([action, state.play(action)]);\n      }\n      return results;\n    })();\n    ref1 = argmax(successors, (function(_this) {\n      return function(arg) {\n        var action, nextState;\n        action = arg[0], nextState = arg[1];\n        if (_this.tree.observed(nextState)) {\n          return mul * _this.tree.value(nextState);\n        } else {\n          return Number.MIN_SAFE_INTEGER;\n        }\n      };\n    })(this)), bestAction = ref1[0], _ = ref1[1];\n    return bestAction;\n  };\n\n  MonteCarloAgent.prototype.select = function(node) {\n    var T, nodeVisits;\n    if (node.isTerminal()) {\n      return null;\n    }\n    T = 30;\n    nodeVisits = this.tree.visitCount(node);\n    if (nodeVisits >= T) {\n      return this.uct(node, nodeVisits);\n    } else {\n      return this.play(node);\n    }\n  };\n\n  MonteCarloAgent.prototype.uct = function(node, nodeVisits) {\n    var C, action, nodeLog, successors;\n    C = 0.7;\n    successors = (function() {\n      var i, len, ref1, results;\n      ref1 = node.possibleActions();\n      results = [];\n      for (i = 0, len = ref1.length; i < len; i++) {\n        action = ref1[i];\n        results.push(node.play(action));\n      }\n      return results;\n    })();\n    nodeLog = Math.log(nodeVisits);\n    return argmax(successors, (function(_this) {\n      return function(succNode) {\n        _this.tree.observe(succNode);\n        return _this.tree.value(succNode) + C * Math.sqrt(nodeLog / (_this.tree.visitCount(succNode) || 1e-6));\n      };\n    })(this));\n  };\n\n  MonteCarloAgent.prototype.expand = function(node, game) {\n    var action, actions, i, len, successor;\n    actions = node.possibleActions();\n    for (i = 0, len = actions.length; i < len; i++) {\n      action = actions[i];\n      successor = node.play(action);\n      if (!this.tree.observed(successor)) {\n        this.tree.observe(successor);\n        game.push(successor);\n        return successor;\n      }\n    }\n    return this.play(node);\n  };\n\n  MonteCarloAgent.prototype.simulate = function(node) {\n    var winner;\n    while (!node.isTerminal()) {\n      node = this.play(node);\n    }\n    winner = node.winner();\n    switch (winner) {\n      case P1:\n        return +1;\n      case P2:\n        return -1;\n      default:\n        return 0;\n    }\n  };\n\n  MonteCarloAgent.prototype.play = function(node) {\n    return node.play(choose(node.possibleActions()));\n  };\n\n  return MonteCarloAgent;\n\n})();\n\nmodule.exports = {\n  P1: P1,\n  P2: P2,\n  MonteCarloAgent: MonteCarloAgent,\n  Tree: Tree\n};\n"],"sourceRoot":"/source/"}